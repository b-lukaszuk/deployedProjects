{"version":3,"sources":["./src/app/utils/range.ts","./src/app/card/card.ts","./src/app/player/playerFactory.ts","./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/card/cardFactory.ts","./src/app/app.module.ts","./src/app/utils/randInt.ts","./src/app/player/player.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["/**\n * imitates python's range function, retruns arrOfConsecutiveNums\n * imitates a bit func overloading from c++, java, e.g.\n * range(2) -> [0, 1]; range(-2) -> [0, -1] (default end=start, start=0, by=1)\n * range(1, 3) -> [1, 2, 3]; range(-1, -3) -> [-1, -2] (default by=1)\n * @param {number} start first value (incl)\n * @param {number} end end value (excl)\n * @param {number} by step betw vals (always positive, even if numbers go down)\n * @returns {Array<number>} array of vals from, to, by\n */\nfunction pyRange(start: number, end?: number, by?: number): Array<number> {\n\n    let result: Array<number> = [];\n\n    if (arguments.length === 1) {\n        end = start;\n        start = 0;\n        by = 1;\n    }\n\n    // inaczej angular strict checker protestuje\n    by = (by === undefined || by === 0) ? 1 : by;\n    end = (end === undefined) ? (start + 1) : end;\n\n    if (start < end) {\n        for (let i = start; i < end; i += by) {\n            result.push(i);\n        }\n    } else {\n        for (let i = start; i > end; i -= by) {\n            result.push(i);\n        }\n    }\n\n    return result;\n}\n\nexport default pyRange;\n","class Card {\n    private _symbol: string;\n    private _covered: boolean;\n    private _matched: boolean;\n    private _id: number;\n    static counter: number = 0;\n\n    public constructor(symbol: string) {\n        this._symbol = symbol;\n        this._covered = true; // covered/uncovered right now\n        this._matched = false; // is matched with other card of a pair\n        this._id = Card.counter;\n        Card.counter += 1;\n    }\n\n    public getId(): number {\n        return this._id;\n    }\n\n    public getSymbol(): string {\n        return this._symbol;\n    }\n\n    public isSymbolEqual(other: Card) {\n        return this._symbol === other._symbol;\n    }\n\n    public isEqual(other: Card) {\n        return this._id === other._id;\n    }\n\n    public toString(): string {\n        return this._covered ? '' : this._symbol;\n    }\n\n    public toggleCovered(): void {\n        this._covered = !this._covered;\n    }\n\n    public toggleMatched(): void {\n        this._matched = !this._matched;\n    }\n\n    public isMatched(): boolean {\n        return this._matched;\n    }\n\n    public isCovered() {\n        return this._covered;\n    }\n\n    // for setting class of the displayed card in html\n    public getStatus(): string {\n        if (this._matched) {\n            return 'matched';\n        } else if (this._covered) {\n            return 'covered';\n        } else {\n            return 'uncovered';\n        }\n    }\n}\n\nexport default Card;\n","import Player from './player';\n\nclass PlayerFactory {\n    public constructor() {\n        // nothing to do here\n    }\n\n    public getPlayer(color: string, cardsIdUptoExcl: number): Player {\n        return new Player(color, cardsIdUptoExcl);\n    }\n}\n\nconst singleton = (function() {\n    let instance: PlayerFactory; // uninitialized so undefined\n\n    function init() {\n        return new PlayerFactory();\n    }\n\n    function getInstance() {\n        if (!Boolean(instance)) {\n            instance = init();\n        }\n        return instance;\n    }\n\n    return {\n        getPlayerFactoryInstance: getInstance,\n    };\n})();\n\nexport default singleton;\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\nimport Card from './card/card'; // for code checker\nimport Player from './player/player'; // for code checker\nimport randInt from './utils/randInt';\nimport singlCardFactory from './card/cardFactory';\nimport singlPlayerFactory from './player/playerFactory';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n    public title: string = 'memory';\n    private cardFactory = singlCardFactory.getCardFactoryInstance();\n    private playerFactory = singlPlayerFactory.getPlayerFactoryInstance();\n    public cards: Card[][] = this.getAllCards();\n    public players: Player[] = this.getFrom2To4Players();\n    public playerToMove: Player = this.players[0];\n    public gameOver: boolean = false;\n    private matchedCards: Card[] = [];\n    public round: number = 1;\n\n    private getAllCards(): Card[][] {\n        let theCards: Card[][] = [];\n        // factory returns always even Num of cards (two of a kind) and >= 4\n        let nOfRows: number = this.cardFactory.getNumOfCards() / 4;\n        let nOfCols: number = this.cardFactory.getNumOfCards() / nOfRows;\n        for (let r = 0; r < nOfRows; r++) {\n            let row: Card[] = [];\n            for (let c = 0; c < nOfCols; c++) {\n                let aCard: Card = this.cardFactory.getRandCard();\n                row.push(aCard);\n            }\n            theCards.push(row);\n        }\n        return theCards;\n    }\n\n    private getNumOfCards() {\n        let row = this.cards.length;\n        let col = this.cards[0].length;\n        return row * col;\n    }\n\n    private getFrom2To4Players(): Player[] {\n        let thePlayers: Player[] = [];\n        let colors: string[] = ['red', 'black', 'blue', 'orange'];\n        let numOfPlayers = randInt(2, 5);\n        for (let i = 0; i < numOfPlayers; i++) {\n            thePlayers.push(this.playerFactory.getPlayer(colors[i],\n                this.getNumOfCards()));\n        }\n        return thePlayers;\n    }\n\n    private changePlayerToMoveToNextOneInLine(): void {\n        let nextPlayerId: number = this.playerToMove.getId() + 1;\n        if (nextPlayerId < this.players.length) {\n            this.playerToMove = this.players[nextPlayerId];\n        } else {\n            this.playerToMove = this.players[0];\n            this.round++;\n        }\n    }\n\n    private updateGameOver(): void {\n        if (this.matchedCards.length === this.getNumOfCards()) {\n            this.gameOver = true;\n        }\n    }\n\n    // assumption: card we are looking for is always in the cards\n    private getCardOfId(cardId: number): Card {\n        let foundCard: Card = this.cards[0][0];\n        for (let r = 0; r < this.cards.length; r++) {\n            for (let c = 0; c < this.cards[r].length; c++) {\n                if (this.cards[r][c].getId() === cardId) {\n                    foundCard = this.cards[r][c];\n                    return foundCard;\n                }\n            }\n        }\n        return foundCard;\n    }\n\n    private getTwoGuessesIeCards(aPlayer: Player): [Card, Card] {\n        // we start with numbers (ids) cause at first a player knows no cards\n        let id1, id2: number;\n        let c1, c2: Card;\n        // players take care not to guess visible cards (so no do-while here)\n        id1 = aPlayer.getFirstGuess();\n        c1 = this.getCardOfId(id1);\n        id2 = aPlayer.getSecondGuess(c1);\n        c2 = this.getCardOfId(id2);\n        return [c1, c2];\n    }\n\n    private coverAllVisibleCards(): void {\n        for (let r = 0; r < this.cards.length; r++) {\n            for (let c = 0; c < this.cards[r].length; c++) {\n                if (!this.cards[r][c].isCovered()) {\n                    this.cards[r][c].toggleCovered();\n                }\n            }\n        }\n    }\n\n    private uncoverCards(...cards: Card[]): void {\n        for (let i = 0; i < cards.length; i++) {\n            if (cards[i].isCovered()) {\n                cards[i].toggleCovered();\n            }\n        }\n    }\n\n    private markCardsAsMatched(...cards: Card[]): void {\n        for (let i = 0; i < cards.length; i++) {\n            if (!cards[i].isMatched()) {\n                cards[i].toggleMatched();\n            }\n        }\n    }\n\n    // inform all players of matched cards (so they don't guess the cards again)\n    private informAllPlayersOfMatchedCards(c1: Card, c2: Card): void {\n        for (let player of this.players) {\n            player.handleMatchedCards(c1, c2);\n        }\n    }\n\n    private handleMatchedCards(c1: Card, c2: Card): void {\n        this.matchedCards.push(c1, c2);\n        this.markCardsAsMatched(c1, c2);\n\n        this.playerToMove.addPoints(100);\n        this.informAllPlayersOfMatchedCards(c1, c2);\n\n        this.updateGameOver();\n    }\n\n    public makeMove(): void {\n        this.coverAllVisibleCards();\n\n        let c1, c2: Card;\n        [c1, c2] = this.getTwoGuessesIeCards(this.playerToMove);\n\n        this.playerToMove.updateKnownCards(c1, c2);\n        this.uncoverCards(c1, c2);\n\n        if (c1.getSymbol() === c2.getSymbol()) {\n            this.handleMatchedCards(c1, c2);\n        } else {\n            this.changePlayerToMoveToNextOneInLine();\n        }\n\n        console.log(this.playerToMove.getName(), \"known cards:\");\n        console.log(this.playerToMove.getKnownCards().map(\n            (card) => { return card.getSymbol() }).sort());\n    }\n\n    ngOnInit() {\n    }\n}\n","<div>\n  <table>\n    <tr>\n      <td colspan=\"3\">\n        <h1>Game description</h1>\n        <p>\n          Below you see a set of cards with hidden symbols. <br />\n          Pressing the button: \"To move: Player N\" causes \"computer player n\" to\n          uncover two cards. <br />\n          Once a pair of cards with the same symbol is revealed, the cards are\n          removed and the player gets the points <br />\n          The game ends when all the cards are paired <br />\n\t  <br />\n\t  Open the console to see a part of a player's memory\n        </p>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <div>\n          <div *ngFor=\"let row of cards; index as rId\">\n            <div\n              *ngFor=\"let card of row; index as cId\"\n              [ngClass]=\"card.getStatus()\"\n            >\n              {{ card.toString() }}\n            </div>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;&nbsp;&nbsp;</td>\n      <td>\n        <h1>Num of players [2-4]: {{ players.length }}</h1>\n        <div *ngFor=\"let player of players\">\n          <div>\n            <h1\n              [style.color]=\"player.getColor()\"\n              [style.background]=\"\n                player.getId() === playerToMove.getId() ? 'lightgray' : 'white'\n              \"\n            >\n              {{ player.getName() }} : {{ player.getPoints() }} pts\n            </h1>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;&nbsp;&nbsp;</td>\n      <td>\n        <h1>Game status:</h1>\n        <h1 *ngIf=\"!gameOver\">IN PROGRESS</h1>\n        <h1 *ngIf=\"gameOver\">GAME OVER</h1>\n        <h1>ROUND: {{ round }}</h1>\n        <button type=\"button\" (click)=\"makeMove()\" [disabled]=\"gameOver\">\n          To move: {{ playerToMove.getName() }}\n        </button>\n      </td>\n    </tr>\n  </table>\n</div>\n<router-outlet></router-outlet>\n","import Card from './card';\nimport randInt from '../utils/randInt';\n\nclass CardFactory {\n    private _symbols: string[] = [\n        '!',\n        '@',\n        '#',\n        '$',\n        '%',\n        '^',\n        '&',\n        '*',\n        '=',\n        '+',\n        '-',\n        '~',\n    ];\n    // I changed _ to ~ because its easier to tell the difference with -\n\n    // used for testing\n    // private _symbols: string[] = [\n    //     '!',\n    //     '@',\n    //     '#',\n    //     '$',\n    // ];\n    private _cards: Card[] = [];\n\n    public constructor() {\n        for (let i = 0; i < this._symbols.length; i++) {\n            // creates two cards of a kind\n            this._cards.push(new Card(this._symbols[i]));\n            this._cards.push(new Card(this._symbols[i]));\n        }\n    }\n\n    public getNumOfCards(): number {\n        return this._cards.length;\n    }\n\n    /**\n     * returns a random card\n     * or unefined if the deck is empty\n     */\n    public getRandCard(): Card {\n        // Array.splice() returns an array and modifies the original array\n        return this._cards.splice(randInt(this._cards.length), 1)[0];\n    }\n}\n\nconst singleton = (function() {\n    let instance: CardFactory; // uninitialized so undefined\n\n    function init() {\n        return new CardFactory();\n    }\n\n    function getInstance() {\n        if (!Boolean(instance)) {\n            instance = init();\n        }\n        return instance;\n    }\n\n    return {\n        getCardFactoryInstance: getInstance,\n    };\n})();\n\nexport default singleton;\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n// do dzialania task1 (ngForms), np. [(ngModel)]\nimport { FormsModule } from '@angular/forms';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        FormsModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/**\n * python like randInt\n * returns random int from given range (incl-excl)\n * @param {number}  min - minimum (incl)\n * @param {number}  max - maximum (excl)\n * @returns {number} random value from a given range\n */\nfunction randInt(min: number, max?: number): number {\n    let result: number = 0;\n\n    for (let i = 0; i < 2; i++) {\n        if (arguments[i] < 0) {\n            throw new Error('range must not include negative numbers');\n        }\n    }\n    if (arguments.length === 1) {\n        max = min;\n        min = 0;\n    }\n    // floats protection\n    min = Math.ceil(min);\n    // should always be true,\n    // but the stricter angular checker requires me to do that way\n    if (max) {\n        max = Math.floor(max);\n        result = Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    return result;\n}\n\nexport default randInt;\n","import randInt from \"../utils/randInt\";\nimport range from \"../utils/range\";\nimport Card from \"../card/card\";\n\nclass Player {\n    private _id: number;\n    private _color: string;\n    private _points: number = 0;\n    private _knownCards: Card[] = [];\n    private _knownTwoSymbols: string[] = [];\n    private _availableCardIds: number[] = []; // to get card id at random\n    static counter: number = 0;\n\n    public constructor(color: string, cardsIdUptoExcl: number) {\n        this._id = Player.counter;\n        this._color = color;\n        Player.counter++;\n        this._availableCardIds = range(cardsIdUptoExcl);\n    }\n\n    public getId(): number {\n        return this._id;\n    }\n\n    public getPoints(): number {\n        return this._points;\n    }\n\n    public getColor(): string {\n        return this._color;\n    }\n\n    public addPoints(howMany: number): void {\n        this._points += howMany;\n    }\n\n    public getName(): string {\n        return \"Player \" + (this._id + 1).toString();\n    }\n\n    /**\n     * returns a random guess (id of a card)\n     */\n    private getRandomGuess(): number {\n        return this._availableCardIds[randInt(this._availableCardIds.length)];\n    }\n\n    public getFirstGuess(): number {\n        let bestGuesses: number[] = this.getIdsOfCardsForTwoKnownSymbols();\n        if (bestGuesses.length !== 0) {\n            return bestGuesses[0];\n        } else {\n            return this.getRandomGuess();\n        }\n    }\n\n    public getSecondGuess(prevGuess: Card): number {\n        let result: number;\n        let matchingCard: Card[] = [];\n        matchingCard = this._knownCards.filter((card) => {\n            return card.isSymbolEqual(prevGuess) && !card.isEqual(prevGuess);\n        });\n        if (matchingCard.length !== 0) {\n            result = matchingCard[0].getId();\n        } else {\n            do {\n                result = this.getRandomGuess();\n            } while (result === prevGuess.getId());\n        }\n        return result;\n    }\n\n    public getKnownCards(): Card[] {\n        return this._knownCards;\n    }\n\n    /**\n     * returns number[] (ids) of two known cards from memory or [] if empty\n     */\n    private getIdsOfCardsForTwoKnownSymbols(): number[] {\n        let theIds: number[] = [];\n        let cards: Card[] = this._knownCards.filter((card) => {\n            return card.getSymbol() === this._knownTwoSymbols[0];\n        })\n        if (cards.length === 2) {\n            theIds = [cards[0].getId(), cards[1].getId()];\n        }\n        return theIds;\n    }\n\n    private handleMatchedCard(cardIn: Card): void {\n        this._knownCards = this._knownCards.filter((card) => {\n            return card.getId() !== cardIn.getId();\n        })\n        this._knownTwoSymbols = this._knownTwoSymbols.filter((symbol) => {\n            return symbol !== cardIn.getSymbol();\n        })\n        this._availableCardIds = this._availableCardIds.filter((someId) => {\n            return someId !== cardIn.getId();\n        })\n    };\n\n    public handleMatchedCards(...cards: Card[]) {\n        for (let i = 0; i < cards.length; i++) {\n            this.handleMatchedCard(cards[i]);\n        }\n    }\n\n    private updateKnownCard(cardIn: Card): void {\n        let cardIdInKnownCards: boolean = this._knownCards.some(\n            (card) => {\n                return card.getId() === cardIn.getId()\n            })\n        let cardSymbolInKnownCards: boolean = this._knownCards.some(\n            (card) => {\n                return card.getSymbol() === cardIn.getSymbol()\n            })\n        if (!cardIdInKnownCards) {\n            this._knownCards.push(cardIn);\n        }\n        if (!cardIdInKnownCards && cardSymbolInKnownCards) {\n            this._knownTwoSymbols.push(cardIn.getSymbol());\n        }\n    }\n\n    public updateKnownCards(...cards: Card[]): void {\n        for (let i = 0; i < cards.length; i++) {\n            this.updateKnownCard(cards[i]);\n        }\n    }\n}\n\nexport default Player;\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}